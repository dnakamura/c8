/*
	Hack because this file gets passed through m4.
	changequote(`[[',`]]')
*/

#include "c8/Lexer.hpp"
#include "c8/Token.hpp"

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <vector>
#include <string>
#include <iostream>
#include <iomanip>



using namespace c8;


%%{
	machine base9;

	newline = '\n' @{curline += 1; linestart = ts;};
	any_count_line = any | newline;

	# Consume a C comment.
	c_comment := any_count_line* :>> '*/' @{fgoto main;};

	main := |*

	# Include the generated fragment which defines our punctuators and keywords
	include([[ragel_fragment.rl]])

	# Alpha numberic characters or underscore.
	alnum_u = alnum | '_';

	# Alpha charactres or underscore.
	alpha_u = alpha | '_';

	# Symbols. Upon entering clear the buffer. On all transitions
	# buffer a character. Upon leaving dump the symbol.
	( punct - [_'"] ) {
		printf( "symbol(%i): %c\n", curline, ts[0] );
	};

	# Identifier. Upon entering clear the buffer. On all transitions
	# buffer a character. Upon leaving, dump the identifier.
	alpha_u alnum_u* {
		push_token(tok::identifier);
	};

	# Single Quote.
	sliteralChar = [^'\\] | newline | ( '\\' . any_count_line );
	'\'' . sliteralChar* . '\'' {
		push_token(tok::string_literal);
	};

	# Double Quote.
	dliteralChar = [^"\\] | newline | ( '\\' any_count_line );
	'"' . dliteralChar* . '"' {
		push_token(tok::string_literal);
	};

	# Whitespace is standard ws, newlines and control codes.
	any_count_line - 0x21..0x7e;

	# Describe both c style comments and c++ style comments. The
	# priority bump on tne terminator of the comments brings us
	# out of the extend* which matches everything.
	'//' [^\n]* newline;

	'/*' { fgoto c_comment; };

	# Match an integer. We don't bother clearing the buf or filling it.
	# The float machine overlaps with int and it will do it.
	digit+ {
		push_token(tok::numeric_literal);
	};

	# Match a float. Upon entering the machine clear the buf, buffer
	# characters on every trans and dump the float upon leaving.
	digit+ '.' digit+ {
		push_token(tok::numeric_literal);
	};

	# Match a hex. Upon entering the hex part, clear the buf, buffer characters
	# on every trans and dump the hex on leaving transitions.
	'0x' xdigit+ {
		push_token(tok::numeric_literal);
	};

	*|;
}%%

%% write data nofinal;

#define BUFSIZE 4096

void Lexer::lex()
{
	int cs, act, have = 0;
	int done = 0;
	te = 0;
	const char *p = buffer_.c_str();
	const char *pe = buffer_.c_str() + buffer_.size();
	const char *eof = pe;
	//ts = 0;
	linestart = p;
	std::cout << "lex()\n";

	curline = 1;
	%% write init;

	%% write exec;

	if ( cs == base9_error ) {
		//TODO fix me
		fprintf(stderr, "PARSE ERROR\n" );
		return;
	}

}
